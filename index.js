// Generated by CoffeeScript 1.7.1
(function() {
  var ImageInspect,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ImageInspect = (function() {
    ImageInspect.prototype.el = null;

    ImageInspect.prototype.inspect = null;

    ImageInspect.prototype.template = "<div id=\"cs-utils-imageinspect\">\n  <div class=\"image-container\"></div>\n</div>";

    ImageInspect.prototype.attachPoint = 'center center body center center';

    ImageInspect.prototype.viewing = false;

    ImageInspect.prototype.width = 400;

    ImageInspect.prototype.height = 400;

    function ImageInspect(inspect, params) {
      var key, value;
      this.inspect = inspect;
      this.onMouseOut = __bind(this.onMouseOut, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.onMouseOver = __bind(this.onMouseOver, this);
      this.attach = __bind(this.attach, this);
      for (key in params) {
        value = params[key];
        this[key] = value;
      }
      document.body.insertAdjacentHTML('beforeend', this.template);
      this.el = document.querySelector('#cs-utils-imageinspect');
      this.imageContainer = this.el.querySelector('.image-container');
      this.image = new Image;
      this.image.src = this.inspect.src;
      this.imageContainer.style.backgroundImage = "url(" + this.inspect.src + ")";
      this.el.style.width = "" + this.width + "px";
      this.el.style.height = "" + this.height + "px";
      this.imageContainer.style.width = "" + this.width + "px";
      this.imageContainer.style.height = "" + this.height + "px";
      this.attach();
      this.inspect.addEventListener('mouseover', this.onMouseOver);
      this.inspect.addEventListener('mouseout', this.onMouseOut);
      this.inspect.addEventListener('mousemove', this.onMouseMove);
    }

    ImageInspect.prototype.attach = function() {
      var attachPoint, i, left, rect, top, _i, _len, _ref, _ref1;
      attachPoint = this.attachPoint.split(' ');
      _ref = [0, 1, 3, 4];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if ((_ref1 = attachPoint[i]) !== 'left' && _ref1 !== 'center' && _ref1 !== 'right' && _ref1 !== 'top' && _ref1 !== 'bottom') {
          continue;
        }
        switch (attachPoint[i]) {
          case 'left':
          case 'top':
            attachPoint[i] = 0;
            break;
          case 'center':
            attachPoint[i] = 0.5;
            break;
          case 'right':
          case 'bottom':
            attachPoint[i] = 1;
        }
      }
      rect = document.querySelector("" + attachPoint[2]).getBoundingClientRect();
      left = rect.left + (rect.width * +attachPoint[3]);
      top = rect.top + (rect.height * +attachPoint[4]);
      this.el.style.left = "" + left + "px";
      return this.el.style.top = "" + top + "px";
    };

    ImageInspect.prototype.onMouseOver = function(e) {
      this.attach();
      this.viewing = true;
      return this.el.style.display = 'block';
    };

    ImageInspect.prototype.onMouseMove = function(mE) {
      var inspectRect, naturalXCenterOffset, naturalXPosition, naturalYCenterOffset, naturalYPosition, offsetX, offsetY, position, ratioX, ratioY;
      if (!this.viewing) {
        return;
      }
      inspectRect = this.inspect.getBoundingClientRect();
      offsetX = mE.pageX - inspectRect.left;
      offsetY = mE.pageY - inspectRect.top;
      ratioX = offsetX / inspectRect.width;
      ratioY = offsetY / inspectRect.height;
      naturalXPosition = ratioX * this.image.naturalWidth;
      naturalYPosition = ratioY * this.image.naturalHeight;
      naturalXCenterOffset = naturalXPosition - this.image.naturalWidth / 2;
      naturalYCenterOffset = naturalYPosition - this.image.naturalHeight / 2;
      position = [(this.width / 2) - (this.image.naturalWidth / 2) - naturalXCenterOffset, (this.height / 2) - (this.image.naturalHeight / 2) - naturalYCenterOffset];
      return this.imageContainer.style.backgroundPosition = "" + position[0] + "px " + position[1] + "px";
    };

    ImageInspect.prototype.onMouseOut = function(e) {
      this.viewing = false;
      return this.el.style.display = 'none';
    };

    return ImageInspect;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ImageInspect;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.ImageInspect = ImageInspect;
  }

}).call(this);
